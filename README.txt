# Proyecto DiagnÃ³stico IA - ClasificaciÃ³n de RadiografÃ­as de TÃ³rax

Este proyecto implementa un pipeline completo para el preprocesamiento, segmentaciÃ³n, entrenamiento, evaluaciÃ³n y despliegue de modelos de deep learning para el diagnÃ³stico automÃ¡tico de imÃ¡genes de tÃ³rax (COVID, Lung Opacity, Normal, Viral Pneumonia).

## Estructura del Proyecto

```
diagnosticoIA/
â”‚
â”œâ”€â”€ datos/
â”‚   â”œâ”€â”€ original/           # Dataset original sin modificar
â”‚   â”œâ”€â”€ procesados/         # ImÃ¡genes y mÃ¡scaras redimensionadas y preprocesadas
â”‚   â””â”€â”€ procesados_split/   # Datos divididos en train/test por clase
â”‚
â”œâ”€â”€ models/                 # Modelos entrenados (.h5, .tflite)
â”‚
â”œâ”€â”€ scripts/                # Scripts para cada etapa del pipeline
â”‚   â”œâ”€â”€ resize_images.py        # Redimensiona imÃ¡genes y aplica mÃ¡scaras
â”‚   â”œâ”€â”€ mover_imagenes.py       # Utilidad para mover imÃ¡genes
â”‚   â”œâ”€â”€ split_dataset.py        # Divide el dataset en train/test
â”‚   â”œâ”€â”€ converter_h5_tflite.py  # Convierte modelos Keras a TFLite
â”‚   â””â”€â”€ __init__.py             # Exporta clases para uso en main.py
â”‚
â”œâ”€â”€ utils/
â”‚   â””â”€â”€ custom_data_loader.py   # Generador personalizado para cargar imÃ¡genes y mÃ¡scaras
â”‚
â”œâ”€â”€ main.py                 # Pipeline principal (ejecuta todo el flujo)
â”œâ”€â”€ train_mobilenetv2.py    # Entrenamiento del modelo MobileNetV2
â”œâ”€â”€ evaluate_batch.py       # EvaluaciÃ³n por lotes del modelo
â”œâ”€â”€ requirements.txt        # Dependencias del proyecto
â””â”€â”€ README.txt              # (Este archivo)
```

## Flujo de Trabajo

1. **Preprocesamiento:**
   - Redimensiona imÃ¡genes y aplica mÃ¡scaras (scripts/resize_images.py).
   - Mueve imÃ¡genes si es necesario (scripts/mover_imagenes.py).

2. **DivisiÃ³n del Dataset:**
   - Divide los datos en conjuntos de entrenamiento y prueba (scripts/split_dataset.py).

3. **Entrenamiento:**
   - Entrena un modelo MobileNetV2 usando generadores personalizados (train_mobilenetv2.py o main.py).

4. **ConversiÃ³n:**
   - Convierte el modelo entrenado a formato TFLite para despliegue eficiente (scripts/converter_h5_tflite.py).

5. **EvaluaciÃ³n:**
   - EvalÃºa el modelo en lotes y genera mÃ©tricas de desempeÃ±o (evaluate_batch.py).

## Clases y Scripts Principales

- `ResizeImages`: Redimensiona imÃ¡genes y aplica mÃ¡scaras.
- `SplitDataset`: Divide el dataset en train/test y copia imÃ¡genes/mÃ¡scaras.
- `LungImageGenerator`: Generador Keras para cargar imÃ¡genes y mÃ¡scaras con aumentos.
- `TrainModelMobilenetV2`: Clase para entrenar el modelo MobileNetV2.
- `ConvertH5ToTFLite`: Convierte modelos Keras a TFLite.

## CÃ³mo Ejecutar

1. Configura las variables de entorno en un archivo `.env` (ver ejemplos en el cÃ³digo).
2. Ejecuta `main.py` para correr el pipeline completo, o ejecuta los scripts individualmente segÃºn la etapa que desees.

## Requisitos

- Python 3.8+
- TensorFlow, OpenCV, Albumentations, scikit-learn, tqdm, dotenv, matplotlib
- Ver `requirements.txt` para la lista completa

## Notas
- La estructura de carpetas de datos debe respetar el formato: `Clase/images/*.png` y `Clase/masks/*.png`.
- El pipeline es modular y puede adaptarse fÃ¡cilmente a nuevos datasets o modelos.

---

#[!Nota]
ðŸ“Š ClasificaciÃ³n:
                 precision    recall  f1-score   support

          COVID       0.84      0.72      0.78       724
         Normal       0.90      0.94      0.92      2039
Viral_Pneumonia       0.88      0.91      0.89       269

       accuracy                           0.88      3032
      macro avg       0.87      0.86      0.86      3032
   weighted avg       0.88      0.88      0.88      3032

**Autor:** Daniel Cuatin, Miguel Guevara, Pedro Valverde
**Fecha:** Junio 2025
